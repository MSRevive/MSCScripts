//Thothie MAR2010_15

//- Dependable base_aoe script
//-
//- These vars MUST be set in game_dynamically_created
//- AOE_OWNER - id of owner (will use value of MY_OWNER if set)
//- AOE_RADIUS - radius of AOE effect (can also be const)
//- AOE_DURATION - duration of AOE effect (can also be const)
//- AOE_AFFECTS_WARY - wary enemies are effected
//
//- Constants (default)
//- AOE_SCAN_TYPE dodamage (scan via dodamage - maybe blocked by other entities) | tsphere (scan via sphere [goes through walls]) | rsphere (scans area freely, but does not go through walls) | noscan (does no scan, but still calls aoe_scan_loop)
//- AOE_SCAN_FREQ 0.5 - how often to scan
//- AOE_FRIENDLY 0 (set 1 for friendly effects)
//- AOE_VULNERABLE 0 (set to 1 to allow AOE generator to be attacked)
//- AOE_VADJ 0 (vertically adjust scan point for dodamage scans)
//
//- Set by base
//- AOE_ACTIVE - 1 while active
//
//- Calls to be handled by top script
//- aoe_affect_target <id> //note: checks PVP before call, unless AOE_FRIENDLY
//- aoe_end - called when AOE_DURATION ends (does not remove script)

#scope server
{
	const AOE_SCAN_TYPE dodamage
	const AOE_SCAN_FREQ 0.5
	const AOE_FRIENDLY 0
	const AOE_VULNERABLE 0
	const AOE_VADJ 0
}

{ game_spawn

	if !AOE_VULNERABLE
	setmodel "null.mdl"
	invincible 1
	race beloved
	nopush 1
	gravity 0
	setvard PLAYING_DEAD 1
}

{ game_dynamically_created //<owner> <radius> <duration> <affects_wary>
	callevent 0.01 aoe_start
}

{ aoe_start

	if ( $get(MY_OWNER,isalive) ) setvard AOE_OWNER MY_OWNER //Small adaption for older scripts
	if ( !AOE_VULNERABLE ) race $get(AOE_OWNER,race) //If this is vulnerable, set appropriate race so it can be targeted
	
	setvard AOE_ACTIVE 1
	callevent aoe_scan_loop //Start scanning
	callevent AOE_DURATION aoe_end //Set timer to end aoe
}

{ aoe_scan_loop

	if AOE_ACTIVE
	repeatdelay AOE_SCAN_FREQ //call loop again
	
	if ( AOE_SCAN_TYPE equals 'dodamage' )
	{
		dodamage $relpos(0,0,AOE_VADJ) AOE_RADIUS 0 100% 0 reflective target
	}

	if ( AOE_SCAN_TYPE contains 'sphere' )
	{
		if ( AOE_FRIENDLY ) setvard AOE_TARGET_LIST $get_isphere(ally,AOE_RADIUS) //Get list to affect friendlies
		else setvard AOE_TARGET_LIST $get_isphere(any,AOE_RADIUS) //Get list to affect enemies

		if AOE_TARGET_LIST isnot none
		calleventloop $get_token_amt(AOE_TARGET_LIST) aoe_affect_targets
	}
}

{ aoe_affect_targets

	local L_TARG $get_token(AOE_TARGET_LIST,game.script.iteration)
	local L_TARG $get_by_idx(L_TARG,id)

	local L_DO_EFFECT $func(func_filter_targs,L_TARG)
	
	if L_DO_EFFECT
	callevent aoe_affect_target L_TARG //affect target
}

{ game_dodamage //PARAM1=hit:0|1 PARAM2=ent_hit PARAM3=(start) PARAM4=(end) //This gets called when using the 'dodamage' scan type

	local L_TARG PARAM2
	local L_DO_EFFECT $func(func_filter_targs,L_TARG)
 	
	if L_DO_EFFECT
	callevent aoe_affect_target L_TARG
}

{ aoe_end
	setvard AOE_ACTIVE 0
}

{ func_filter_targs //<targId> //returns 0 or 1 depending on whether or not this aoe should affect the given target

	local L_TARG PARAM1
	local L_DO_EFFECT 1

	if ( !AOE_FRIENDLY ) //If not a friendly aoe
	{
		if ( $get(AOE_OWNER,isplayer) )
		{
			if ( $get(L_TARG,isplayer) ) //if player is trying to affect player
			{
				if ( !game.pvp ) local L_DO_EFFECT 0 //If not pvp, then dont affect target
			}
		}
		
		//Only check relationships if its not a friendly aoe, since getting non-friendly list here does not auto-filter relationships.
		local L_RELATE $get(AOE_OWNER,relationship,L_TARG)
		if ( L_RELATE equals ally ) local L_DO_EFFECT 0
		else if ( L_RELATE equals neutral ) local L_DO_EFFECT 0
		
		if !AOE_AFFECTS_WARY
		if ( L_RELATE equals wary ) local L_DO_EFFECT 0
	}

	if ( AOE_SCAN_TYPE equals 'rsphere' )
	{
		//Check for line of sight
		local TRACE_START $get(ent_me,origin)
		local TRACE_END $get(L_TARG,origin)
		local TRACE_LINE $get_traceline(TRACE_START,TRACE_END,worldonly)
		
		if TRACE_LINE isnot TRACE_END
		local L_DO_EFFECT 0 //There is a wall in the way!
	}
	
	return **clear
	return L_DO_EFFECT
}
