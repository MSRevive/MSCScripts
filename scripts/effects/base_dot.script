#scope server

{
	local reg.effect.name $rand(0,999) //Internal registereffect name. If the name already exists, registereffect will not work.
	local reg.effect.flags none //Only accepts player_action. Not needed for DoTs
	local reg.effect.script $rand(0,999)
	registereffect


	setvar game.effect.removeondeath 1
	setvar game.effect.id DOT_NAME //Var is tested for existence to see if this is an effect. Rather odd way to do it.
									//It is also the identifier used to check haseffect and removeeffect.
									
	setvar game.effect.displayname wtf //I dont have an effing clue.
	setvar game.effect.flags none //Only accepts nostack
	//There are additional vars that can how the player is allowed to move, but that is beyond the scope of a dot base.
	
	const DOT_NAME base_dot //Internal name to track the effect. Set to a custom name for the top effect
	const DOT_TYPE none
	
	//setvar DOT_AFFLICTER none
	//setvar DOT_DMG none
	
	const DOT_FREQ $randf(0.7,1.3)
	

	const DOT_RESISTED "Your DoT was resisted!"
	const DOT_IMMUNED "The enemy is immune to your DoT!"
	
	const DOT_AFFLICTED "You are afflicted with a DoT." //This gets displayed on the person affected, not the afflicter
	const DOT_END "The DoT wears off."
}

{ game_activate //<duration> <afflicter> <dmg amt> <skill-to-level>

	setvard DOT_DURATION PARAM1
	setvard DOT_AFFLICTER PARAM2
	setvard DOT_DMG PARAM3
	setvard DOT_SKILL PARAM4
	
	local L_RESISTED $func(resist_check,DOT_TYPE,DOT_AFFLICTER)
	if ( !L_RESISTED )
	{
		callevent dot_start
	}
	else
	{
		callevent dot_failed
	}
}

{ dot_start

	callevent DOT_FREQ dot_effect
	callevent DOT_DURATION effect_die
}

{ dot_effect //requires DOT_TYPE DOT_DMG DOT_FREQ DOT_AFFLICTER DOT_SKILL

	xdodamage $get(ent_me,id) direct DOT_DMG 100 DOT_AFFLICTER DOT_AFFLICTER DOT_SKILL DOT_TYPE
	callevent DOT_FREQ dot_effect
}

{ dot_failed

	playermessage DOT_AFFLICTER DOT_RESISTED
	callevent effect_die
}

{ resist_check //PARAM1 = element/stun, PARAM2 = afflicter. Func returns 0|1

	local L_ELEM PARAM1
	local L_ATTACKER PARAM2
	
	if ( L_ELEM contains '_effect' ) local L_ELEM $string_upto(L_ELEM,'_') //Get the base element type
	
	local L_VULNERABILITY $get_takedmg(ent_me,L_ELEM) //Returns damage multiplier from 0 to 1. 0 being immune.
	
	if ( L_ELEM equals 'stun' ) //If dmg type is a stun, resistance is handled differently
	{
		local L_VULNERABILITY $get(ent_me,scriptvar,'IMMUNE_STUN') //Immune stun ranges from 0 to 100. 100 being immunity to stuns.
		if ( $get(ent_me,nopush) ) local L_VULNERABILITY 100 //Monsters that cant be pushed are also immune to stuns.
		divide L_VULNERABILITY 100 //Set within expected resistance range.
		local L_VULNERABILITY $math(subtract,1,L_VULNERABILITY) //inverse to get correct value
	}

	//Additional checks to see if the effect should be applied.
	//if ( !$can_damage(ent_me,L_ATTACKER) ) local L_VULNERABILITY 0
	if ( $get(ent_me,scriptvar,'NPC_NO_PLAYER_DMG') ) //FEB2010_04 - If immune to player, do not apply affects from said
	{
		if $get(L_ATTACKER,isplayer)
		local L_VULNERABILITY 0
	}

	if ( !$get(ent_me,isplayer) )
	{
		if ( $lcase(game.monster.name) contains maldora )
		{
			local L_VULNERABILITY 0
		}
	}

	return **clear
	local L_ROLL $randf(0,1)
	if ( L_ROLL < L_VULNERABILITY )
	{
		return 0 //Is vulnerable
	}
	else
	{
		return 1 //Resisted
	}
}

{ game_duplicated

	add EFFECT_DUPLICATED 1
	infomsg all "Dot effect duplicated!" DOT_NAME
}

{ [shared] effect_die //Required for any and all effects.
	removescript
}