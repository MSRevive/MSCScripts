//Hoping for a more refined knock back effect that simulates the players head snapping back from the force of the impact
//<stun_duration> //rec <5 secs
//[inflictor_id] //unused atm
//<velocity>

{ 	[server]
	const EFFECT_ID			player_slamed
	const EFFECT_ACTIONTYPE		nostack
	const EFFECT_SCRIPT		$currentscript

	setvard game.effect.id		EFFECT_ID
	setvard game.effect.displayname	"Slam"
	setvard game.effect.type	EFFECT_ACTIONTYPE

	setvard local.effect.duration 	0
}

#include effects/base_dot	allowduplicate

{ 	[server] game_activate

	setvard local.effect.duration PARAM1
	setvard PUSH_VEL PARAM3
	addvelocity ent_me PUSH_VEL

	if $get(ent_me,isplayer) //no visual effect on monsters - save the edict

	if !$get(ent_me,nopush)
	
	clientevent new ent_me $currentscript local.effect.duration
	setvard local.effect.clientscript game.script.last_sent_id
}

// ===========
// Client Side
// ===========
{ 	[client]
	const MIN_STUMBLEAMT 	-10
	const MAX_STUMBLEAMT 	 10
	const STUMBLE_RIGHT_MAX 	 80
	const STUMBLE_LEFT_MAX 		0
	const STUMBLE_RIGHT_TRESHHOLD 	 30
	const STUMBLE_LEFT_TRESHHOLD 	0
	const STUMBLE_FORWARD_MAX 	 0
	const STUMBLE_BACK_MAX 		-50
	const STUMBLE_FORWARD_T 	 0
	const STUMBLE_BACK_T 		-20
	const MAX_SWAY 		 20
	const MIN_SWAY 		-20
	const MAX_SWAY_T 	 8
	const MIN_SWAY_T 	-8
	const MAX_SWAY_RATE 	 1
	const MIN_SWAY_RATE 	-1
	const MAX_SWAY_AMT       0.1
	const MIN_SWAY_AMT      -0.1
}

{	[client] client_activate

	callevent PARAM1 effect_die
}

{	[client]
	repeatdelay 0.3

	if game.clientside

	callevent drunk_stumble
	callevent drunk_sway
}
{	[client]
	repeatdelay 0.01

	if game.clientside

	inc DRUNK_SWAY_FORWARD DRUNK_SWAY_RATE_F
	capvar DRUNK_SWAY_FORWARD MIN_SWAY MAX_SWAY
	setvard game.cleffect.view_ofs.pitch DRUNK_SWAY_FORWARD

	inc DRUNK_SWAY_SIDE DRUNK_SWAY_RATE
	capvar DRUNK_SWAY_SIDE MIN_SWAY MAX_SWAY
	setvard game.cleffect.view_ofs.roll DRUNK_SWAY_SIDE

	setvard game.cleffect.move_ofs.forward DRUNK_FORWARDMOVE
	setvard game.cleffect.move_ofs.right DRUNK_SIDEMOVE
}

{	[client] drunk_sway

	//Side Sway
	inc DRUNK_SWAY_RATE $randf(MIN_SWAY_AMT,MAX_SWAY_AMT)
	capvar DRUNK_SWAY_RATE MIN_SWAY_RATE MAX_SWAY_RATE

	//Correction
	if( DRUNK_SWAY_SIDE >= MAX_SWAY_T ) dec DRUNK_SWAY_RATE MAX_SWAY_AMT
	if( DRUNK_SWAY_SIDE <= MIN_SWAY_T ) inc DRUNK_SWAY_RATE MAX_SWAY_AMT
	
	//Forward Sway
	inc DRUNK_SWAY_RATE_F $randf(MIN_SWAY_AMT,MAX_SWAY_AMT)
	capvar DRUNK_SWAY_RATE_F MIN_SWAY_RATE MAX_SWAY_RATE

	//Correction
	if( DRUNK_SWAY_FORWARD >= MAX_SWAY_T ) dec DRUNK_SWAY_RATE_F MAX_SWAY_AMT
	if( DRUNK_SWAY_FORWARD <= MIN_SWAY_T ) inc DRUNK_SWAY_RATE_F MAX_SWAY_AMT
}

{	[client] drunk_stumble


	//Forward move
	inc DRUNK_FORWARDMOVE $rand(MIN_STUMBLEAMT,MAX_STUMBLEAMT)
	capvar DRUNK_FORWARDMOVE STUMBLE_BACK_MAX STUMBLE_FORWARD_MAX

	//Correction
	if( DRUNK_FORWARDMOVE >= STUMBLE_FORWARD_T ) dec DRUNK_FORWARDMOVE $rand(0,MAX_STUMBLEAMT)
	if( DRUNK_FORWARDMOVE <= STUMBLE_BACK_T ) inc DRUNK_FORWARDMOVE $rand(0,MAX_STUMBLEAMT)
	
	//Side move
	setvard DRUNK_SIDEMOVE 	DRUNK_SWAY_SIDE
	multiply DRUNK_SIDEMOVE	$rand(0,20)
	capvar DRUNK_SIDEMOVE 	STUMBLE_LEFT_MAX STUMBLE_RIGHT_MAX

	//Correction
	if( DRUNK_SIDEMOVE >= STUMBLE_RIGHT_TRESHHOLD ) dec DRUNK_SIDEMOVE $rand(0,MAX_STUMBLEAMT)
	if( DRUNK_SIDEMOVE <= STUMBLE_LEFT_TRESHHOLD ) inc DRUNK_SIDEMOVE $rand(0,MAX_STUMBLEAMT)
}
