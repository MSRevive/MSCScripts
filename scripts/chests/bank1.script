//This is a special chest that allows players to store inventory as quest data
//(thus removing weight and hopefully reducing likelihood of overflow)

//Remade by greatguys1
//Stores ammo and potions.

#scope server

{
	const ANIM_IDLE "idle"
	const ANIM_CLOSE "close"
	const ANIM_OPEN "open"

	//Takes a prefix and max amt, then generates that many quest slots to store items in, starting at 0.
	const BANK_PREFIX "b"
	const BANK_MAX 10
	//This would produce "b0;b1;b2;b3;b4;b5;b6;b7;b8;b9" in BANK_STRINGS
	//It is generated so other galat bank chests can be made simply by changing the bank_prefix const

	const MAX_BANK_STRING 255 //255 is the largest safest string that can be stored in a quest.

	const MAX_IN_ONE_TRANSACTION 100 //Max number of arrows allowed to store in one deposit transaction
	const MAX_AMMO_IN_ONE_SLOT 1500
	const MAX_SWIGS_IN_ONE_SLOT 20

	setvard NPC_ECHO_ITEMS 1 //flags for c++ code??
	setvard NPC_NO_REPORT_ITEMS 1

	setvard PLAYER_WITHDRAWING 0 //Switches to either a player id or 0 depending on whether a player is withdrawing. 2 players cannot withdraw at the same time
}

#include chests/bank1/filter
#include chests/bank1/deposit
#include chests/bank1/withdraw

{ game_spawn

	name "Galat's Wondrous Chest of Storage"
	hp 1
	invincible 1
	width 20
	height 30
	setmodel "misc/treasure.mdl"
	setmodelbody 0 2 //new gold submodel

	setidleanim ANIM_IDLE
	gravity 0.1 //float down to ground

	nopush 1

	calleventloop BANK_MAX generate_bank_strings
	
	menu.autoopen 1 //Opens menu when e is pushed
}

{ generate_bank_strings //Creates the string used for storing and searching items in quests

	local L_STR $stradd(BANK_PREFIX,game.script.iteration)

	if ( BANK_STRINGS equals 'BANK_STRINGS' ) //As much as I wanna initialize this variable at the top of the script, I can't because it will cause issues.
	{
		setvard BANK_STRINGS L_STR
	}
	else
	{
		token.add BANK_STRINGS L_STR
	}
}

{ game_menu_getoptions //PARAM1=player activating menu

	local L_PLAYER PARAM1
	
//Depositing functions
	//Get items in hand
	local L_ITEMS $get(L_PLAYER,scriptvar,'PLR_LEFT_HAND') //Gets item id in hand
	token.add L_ITEMS $get(L_PLAYER,scriptvar,'PLR_RIGHT_HAND')
	
	//Filter the items, returns only valid items. 
	local L_ITEMS $func(func_filter_items,L_PLAYER,L_ITEMS) //<player> <item_id_in_token>
	
	if ( L_ITEMS equals '0' ) 
	{
		infomsg L_PLAYER "Galat's wondrous Chest of Storage" "Be sure to place any items you wish to store in your hands."
		
		if ( NUM_REMOVED > 0 ) //using flag from { filter_by_space to determine if items were invalidated due to not enough bank space
		{
			local reg.mitem.title "Chest is Full"
			local reg.mitem.type disabled
			menuitem.register
		}
	}
	else
	{
		calleventloop $get_token_amt(L_ITEMS) add_deposit_options L_ITEMS
	}

//Withdrawing functions
	//Check if there's anything in the bank at all
	if ( $func(func_check_bank_has,L_PLAYER) )
	{
		if ( $get(L_PLAYER,numitems) >= G_MAX_ITEMS )
		{
			infomsg L_PLAYER "Can't Withdaw Items" "Your inventory is full."
			local reg.mitem.title "(Inventory Full)"
			local reg.mitem.type disabled
			menuitem.register
		}
		else
		{
			if ( !PLAYER_WITHDRAWING )
			{
				local reg.mitem.title "Withdraw Items"
				local reg.mitem.type callback
				local reg.mitem.callback withdraw_items
				menuitem.register
			}
			else
			{
				local L_MSG $get(ent_me,name) ": Cannot withdraw while the chest is in use."
				dplayermessage $get(L_PLAYER,id) L_MSG

				local reg.mitem.title "Withdraw Items"
				local reg.mitem.type disabled
				menuitem.register
			}
		}
	}
}

{ add_deposit_options //<token_of_item_ids>

	local L_ITEM $get_token(PARAM1,game.script.iteration)
	local L_ITEM_TITLE "Deposit " $get(L_ITEM,name)
	
	local L_SCRIPTNAME_STRING $func(func_make_string,L_ITEM)
	local L_DEPOSIT_AMT $get_token(L_SCRIPTNAME_STRING,1)
	if ( L_DEPOSIT_AMT > 0 )
	{
		stradd L_ITEM_TITLE " ("
		stradd L_ITEM_TITLE L_DEPOSIT_AMT
		stradd L_ITEM_TITLE ")"
	}

	local reg.mitem.title L_ITEM_TITLE
	local reg.mitem.type callback
	local reg.mitem.data L_ITEM
	local reg.mitem.callback deposit_item
	menuitem.register
}

{ trade_success
	callevent open_chest
}

{ trade_done
	callevent close_chest
	callevent erase_store
	setvard PLAYER_WITHDRAWING 0
}

{ erase_store

	npcstore.remove STORENAME
}

{ game_dynamically_created //<summoner>

	local L_YAW $get(PARAM1,angles.yaw)
	setsolid none //don't let players use their scrolls to stick monsters

	if ( !$get(PARAM1,isplayer) )
	{
		callevent spawn_in L_YAW
	}
	else
	{
		local OTHER_CHEST $get_by_name(galat_bank1)
		if ( $get(OTHER_CHEST,exists) )
		{
			setorigin OTHER_CHEST $get(ent_me,origin)
			callexternal OTHER_CHEST spawn_in $neg(L_YAW)
			deleteent ent_me
		}
		else
		{
			name_unique galat_bank1
			callevent spawn_in $neg(L_YAW)
		}
	}
}

{ spawn_in

	local L_YAW PARAM1

	playsound 0 7 magic/spawn.wav
	setangle face $vec(0,L_YAW,0)
	callexternal GAME_MASTER gm_fade_in $get(ent_me,id) 5
	
	setvard SCAN_AREA $get_tsphere(any,64)
	if SCAN_AREA isnot none
	calleventloop $get_token_amt(SCAN_AREA) move_monsters 
}

{ move_monsters
	local CUR_TARG $get_token(SCAN_AREA,game.script.iteration)
	if !$get(CUR_TARG,isplayer)
	if !$get(CUR_TARG,scriptvar,'GALAT_CHEST')
	local TARG_ORG $get(CUR_TARG,origin)
	local TARG_ANG $angles(game.monster.origin,TARG_ORG)
	setvelocity CUR_TARG $relvel($vec(0,TARG_ANG,0),$vec(10,1000,110)) override
}

{ fade_in_done //from gm
	setprop ent_me rendermode 0
	setprop ent_me renderamt 255
}

{ open_chest

	playsound 2 10 Items/creak.wav
	playanim hold ANIM_OPEN
}

{ close_chest

	playanim once ANIM_CLOSE
}

{ func_get_free_bank //<playerId> <itemId> - Returns a quest that has enough space to store the item, or 0 if there is no space.

	local L_PLAYER PARAM1
	local L_ITEM PARAM2
	
	calleventloop BANK_MAX free_bank_looper L_PLAYER L_ITEM
	
	return **clear
	return FREE_BANK
}

{ free_bank_looper

	if ( game.script.iteration == 0 )
	{
		setvard FREE_BANK 0
	}
	
	local L_PLAYER PARAM1
	local L_ITEM PARAM2
	
	local L_ITEM_SCRIPTNAME $get(PARAM2,itemname)
	local L_ITEM_STRING $func(func_make_string,L_ITEM)
	
	local L_BANK $get_token(BANK_STRINGS,game.script.iteration)
	local L_BANK_CONTENTS $get_quest_data(L_PLAYER,L_BANK)
	
	//See if item is a quantity that can stack in an existing slot
	local L_NEW_BANK_CONTENTS $func(func_stack_quantity,L_BANK_CONTENTS,L_ITEM_STRING)
	if ( L_NEW_BANK_CONTENTS isnot L_BANK_CONTENTS ) //If new bank contents change, then a stack was allowed.
	{
		setvard FREE_BANK L_BANK
		breakloop
	}
	else
	{
		//Add
		local L_RESULT $math(add,$len(L_BANK_CONTENTS),$len(L_ITEM_STRING))
		add L_RESULT 1 //will automatically incur another char by adding it to a token (;)
		
		if ( L_RESULT <= MAX_BANK_STRING )
		{
			setvard FREE_BANK L_BANK
			breakloop
		}
	}
}

{ func_check_bank_has //<playerId> [itemScriptname]
//Returns 1 if there is anything deposited in the players bank at all.
//Returns 0 if there is nothing.
//Returns a bank slot and index in a token if a scriptname is provided, and that item is found.
//Returns 0 if a scriptname is provided and that item is not found in the players bank.

	local L_PLAYER PARAM1
	local L_ITEM_SCRIPTNAME PARAM2
	
	if ( L_ITEM_SCRIPTNAME equals 'PARAM2' )
	{
		calleventloop BANK_MAX bank_has_anything_loop L_PLAYER
	}
	else
	{
		calleventloop BANK_MAX bank_has_item_loop L_PLAYER L_ITEM_SCRIPTNAME
	}
	
	return **clear
	return BANK_HAS
}

{ bank_has_anything_loop //<playerId>

	if ( game.script.iteration == 0 )
	{
		setvard BANK_HAS 0
	}
	
	local L_BANK_SLOT $get_token(BANK_STRINGS,game.script.iteration)
	local L_BANK_CONTENTS $get_quest_data(PARAM1,L_BANK_SLOT)
	
	if ( $len(L_BANK_CONTENTS) > 1 )
	{
		setvard BANK_HAS 1
		breakloop
	}
}

{ bank_has_item_loop //<playerId> <itemScriptName>

	if ( game.script.iteration == 0 )
	{
		setvard BANK_HAS 0
	}
	
	local L_BANK_SLOT $get_token(BANK_STRINGS,game.script.iteration)
	local L_BANK_CONTENTS $get_quest_data(PARAM1,L_BANK_SLOT)
	
	local L_IDX $get_find_token(L_BANK_CONTENTS,PARAM2)
	
	if ( L_IDX != -1 )
	{
		setvard BANK_HAS L_BANK_SLOT ";" L_IDX
		breakloop
	}
}

{ func_stack_quantity //<bankContents> <func_make_string> -Attempts to stack the made string in the bank 
//contents string. Returns bank contents and sets a variable to flag the remainder

	local L_BANK_CONTENTS PARAM1
	local L_SCRIPTNAME_STRING PARAM2
	
	setvard STACK_REMAINDER $get_token(L_SCRIPTNAME_STRING,1)
	if ( STACK_REMAINDER == 0 ) setvard STACK_REMAINDER 1
	
	local L_ITEM_SCRIPTNAME $get_token(L_SCRIPTNAME_STRING,0)
	
	local L_MAX_QUANTITY 1
	if ( $get_item_table(L_ITEM_SCRIPTNAME,is_projectile) ) local L_MAX_QUANTITY MAX_AMMO_IN_ONE_SLOT
	else if ( $get_item_table(L_ITEM_SCRIPTNAME,is_drinkable) ) local L_MAX_QUANTITY MAX_SWIGS_IN_ONE_SLOT
	
	if ( L_MAX_QUANTITY > 1 )
	{
		local L_EXISTING_IDX $get_find_token(L_BANK_CONTENTS,L_ITEM_SCRIPTNAME)
		if ( L_EXISTING_IDX != -1 ) //If the item exists in this bank slot
		{
			local L_EXISTING_QUANTITY $func(func_get_stored_quantity,L_BANK_CONTENTS,L_EXISTING_IDX)
			
			if ( L_EXISTING_QUANTITY < L_MAX_QUANTITY )
			{
				//Flag inserting the quantity variable in the contents if necessary
				local L_INSERT_QUANTITY 1
				local L_EXISTING_SCRIPTNAME_STRING L_ITEM_SCRIPTNAME //Make the string so we can test its length later
				if ( L_EXISTING_QUANTITY != 1 ) 
				{
					local L_INSERT_QUANTITY 0
					token.add L_EXISTING_SCRIPTNAME_STRING $get_token(L_BANK_CONTENTS,$math(add,L_EXISTING_IDX,1))
				}
				
				//Add up stacks and set remainder
				add L_EXISTING_QUANTITY STACK_REMAINDER
				local L_REMAINDER 0
				if ( L_EXISTING_QUANTITY > L_MAX_QUANTITY )
				{
					local L_REMAINDER $math(subtract,L_EXISTING_QUANTITY,L_MAX_QUANTITY)
					local L_EXISTING_QUANTITY L_MAX_QUANTITY
				}
				
				//Build new string
				local L_NEW_SCRIPTNAME_STRING L_ITEM_SCRIPTNAME ";" $int(L_EXISTING_QUANTITY)
				//Test the fit
				local L_BANK_CONTENTS_LEN $len(L_BANK_CONTENTS)
				subtract L_BANK_CONTENTS_LEN $len(L_EXISTING_SCRIPTNAME_STRING)
				add L_BANK_CONTENTS_LEN $len(L_NEW_SCRIPTNAME_STRING)
				
				//If bank string will be valid
				if ( L_BANK_CONTENTS_LEN <= MAX_BANK_STRING )
				{
					//Set appropriate quantity inside of bank
					if ( L_INSERT_QUANTITY ) token.set L_BANK_CONTENTS L_EXISTING_IDX L_NEW_SCRIPTNAME_STRING
					else token.set L_BANK_CONTENTS $math(add,L_EXISTING_IDX,1) $int(L_EXISTING_QUANTITY)
				
					//Properly flag remainder
					setvard STACK_REMAINDER L_REMAINDER
				}
			}
		}
	}

	return **clear
	return L_BANK_CONTENTS
}

{ func_make_string //<itemId> //Puts item in a paired token with its quantity, and returns the string.

	local L_ITEM PARAM1
	local L_ITEM_SCRIPTNAME $get(PARAM1,itemname)
	
	local L_QUANTITY 1
	
	if ( $get(L_ITEM,is_projectile) )
	{
		local L_QUANTITY $get(L_ITEM,quantity)
		if ( L_QUANTITY > MAX_IN_ONE_TRANSACTION ) local L_QUANTITY MAX_IN_ONE_TRANSACTION
	}
	else if ( $get(L_ITEM,is_drinkable) ) //Item wont be both
	{
		local L_QUANTITY $get(L_ITEM,quality)
	}
	
	if ( L_QUANTITY > 1 ) token.add L_ITEM_SCRIPTNAME L_QUANTITY
	
	return **clear
	return L_ITEM_SCRIPTNAME
}

{ func_get_stored_quantity //<bankContents> <idx> //Returns the number of items in that slot, and the one after if the item holds a quantity

	local L_BANK_CONTENTS PARAM1
	
	local L_QUANTITY $math(add,PARAM2,1)
	local L_QUANTITY $get_token(L_BANK_CONTENTS,L_QUANTITY)
	
	//Algorithm to detect if the item in the bank has quantity
	if ( L_QUANTITY equals $num(L_QUANTITY) )
	{
		if ( L_QUANTITY == 0 ) local L_QUANTITY 1
	}
	else local L_QUANTITY 1
	
	return **clear
	return L_QUANTITY
}