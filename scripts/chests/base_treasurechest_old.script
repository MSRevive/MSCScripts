#scope server
// Treasure chest
// Uses: STORENAME
//- Thothie: convention says I should move this to /chests
//- but it's too many scripts to edit, so I've not bothered yet

//useful events for building chests:
//callevent get_quantity //<min_items> <max_items> <+*per_player> [hp_req] //returns GIVE_QUANTITY
//callevent get_chance //<single_player%> <%chance_per_player> [max_chance] [hp_req] //returns GIVE_PRIZE (1|0) and TC_CHANCE (Total %Chance)
//callevent add_gold //<min_amt> <max_amt> <quant_per_pouch> //add gold pouches to chest
//callevent get_players //[hp_req] //returns TC_NPLAYERS = #players with hp > hp_req (defaults 20) - filters out bots, afks, and players with < hp_req
//callevent get_players_by_stat //<stat_name> <min_req> //returns TC_NPLAYERS = #players with stat_name > min_req, also requires at least 20hp

//callevent add_noob_item //[%chance] - random n00b item
//callevent add_good_item //[%chance] - random good item
//callevent add_great_item //[%chance] - random great item
//callevent add_epic_item //[%chance] - random epic item

{
	//newest charm is unique to a few maps, shift to epic item with each new charm release
	const NEWEST_CHARM item_charm_w2

	const ULTRA_RARE_SINGLE 1%
	const ULTRA_RARE_PPLAYER 5%

	const RARE_SINGLE 5%
	const RARE_PPLAYER 10%

	const UNCOMMON_SINGLE 10%
	const UNCOMMON_PPLAYER 30%
	const UNCOMMON_COUNT_PPLAYER 0.25

	const COMMON_COUNT_PPLAYER 0.5

	const ORE_CHANCE 2000

	const ANIM_IDLE idle
	const ANIM_CLOSE close
	const ANIM_OPEN open
}

//include [server] debug
//#include [server] chests/base_treasurechest_shared

{ game_precache
	precachefile chests/black_chest
}

{ game_spawn

	hp 1
	invincible  2
	name a|Treasure Chest
	width 20
	height 30
	nopush 1 //JUN2010_15
	setmodel	misc/treasure.mdl
	callevent	treasure_spawn
	setidleanim	ANIM_IDLE

	if ( FIXED_POS isnot 'FIXED_POS' ) setorigin ent_me FIXED_POS

	callevent 0.1 check_stock_chest

	setvard IMMUNE_PUSH 1
}

{ game_postspawn
	//allow additional items via addparameters
	//dbg dynchest-game_postspawn: PARAM4
	if ( PARAM4 contains set_chest_sprite_in )
	{
		callevent 0.1 chest_sprite_in
		local EXIT_SUB 1
	}

	if ( PARAM4 contains set_chest_glow )
	{
		callevent 0.1 chest_glow
		local EXIT_SUB 1
	}

	if !EXIT_SUB	
	if PARAM4 isnot none
	setvard BC_MAPPER_ITEMS PARAM4 //need to update this chest type to use this
}

{ chest_sprite_in
	clientevent new all effects/sfx_sprite_in $get(ent_me,origin) xflare1.spr 20 4.0
	playsound 0 10 amb/quest1.wav
}

//{ game_precache
//	add G_PRECACHE 1
//}

{ [server] check_stock_chest

	if ( BC_INSTANT_SPAWN ) callevent 1.0 spawn_black_chest
}



{ [server] trade_success

	//Need a squeak sound
	volume		10
	playrandomsound	2	Items/creak.wav
	playanim		hold	ANIM_OPEN

}
{ [server] trade_done

	setvard LAST_USED_CHEST $get(BCT_USER_ID,scriptvar,'PL_LAST_CHEST')
	if ( LAST_USED_CHEST isnot $get(ent_me,id) )
	{
		callexternal BCT_USER_ID ext_chest_lastused $get(ent_me,id)
	}
	setvard IN_USE 0
	playanim	once	ANIM_CLOSE
	setidleanim	ANIM_IDLE
}

{ [server] game_playerused

	////dbg chest-used- $get(PARAM1,name)
	if game.serverside

	callexternal PARAM1 ext_remove_afk

	setvard TC_CHEST_USER PARAM1
	setvard CHEST_USER PARAM1

	if ( BC_SPAWN_ON_USE )
	{
		if !BC_BLACK_CHEST_SPAWNED
		callevent 1.0 spawn_black_chest
	}

	if ( !BCT_STOCKED )
	{
		setvard BCT_STOCKED 1
		createstore STORENAME
		callevent chest_additems
	}

	setvard BCT_USER_ID PARAM1

	if !IN_USE

	setvard LAST_USED_CHEST $get(PARAM1,scriptvar,'PL_LAST_CHEST')

	if ( LAST_USED_CHEST equals $get(ent_me,id) )
	{
		if LAST_USED_CHEST isnot 0 //redundant
		dplayermessage PARAM1 "You must wait a moment before using this chest again."
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	setvard IN_USE 1
	callevent 10.0 reset_use //in case buggers

	setvard CHEST_TARGET PARAM1
	if ( !ADDED_QUALITY )
	{
		setvard ADDED_QUALITY 1
		callevent add_quality_items CHEST_TARGET //these require attributes
	}
	callevent 0.1 offer_goodies //split second delay to make sure store propigates

	////dbg temp $get(ent_lastused,name) opened me ( $item_exists(ent_lastused,item_gaxe_handle) )
	if ( !CHECKED_FOR_ORE )
	{
		if !NO_ORE

		if $item_exists(ent_lastused,item_gaxe_handle)
		if !$item_exists(ent_lastused,item_ore_lorel)
		local L_ORE_CHANCE ORE_CHANCE
		callevent get_players 20
		if ( TC_NPLAYERS > 1 )
		{
			if TC_NPLAYERS < 10
			local DIVIDE_CHANCE TC_NPLAYERS
			multiply DIVIDE_CHANCE 3
			divide L_ORE_CHANCE DIVIDE_CHANCE
			dbg ore_roll: Adjusting ORE_CHANCE to L_ORE_CHANCE
		}
		local L_ORE_CHANCE $int(L_ORE_CHANCE)
		setvard CHECKED_FOR_ORE 1
		local ORE_ROLL $rand(1,L_ORE_CHANCE)
		dbg ore_roll: ORE_ROLL vs L_ORE_CHANCE ( ORE_CHANCE )
		if ORE_ROLL == 1
		local N_PLAYERS game.playersnb
		if N_PLAYERS > 1
		addstoreitem STORENAME item_ore_lorel 1 0
	}
}

{ offer_goodies
	offerstore STORENAME CHEST_TARGET inv trade
	callevent	chest_used
}

   //Hit by someone
{ [server] game_struck
   
	volume 10
	playsound 2 debris/wood2.wav
}

{ chest_additems //not enough bolts around, and not enough time to edit all the chests, so here we go

	if !NO_BOLTS

	local L_MAP_NAME $lcase(game.map.name)
	if L_MAP_NAME isnot edana
	callevent get_chance 5 2 40 100
	if ( GIVE_PRIZE ) addstoreitem STORENAME proj_bolt_wooden 25 0 0 25
	callevent get_chance 2 5 30 100
	if ( GIVE_PRIZE ) addstoreitem STORENAME proj_bolt_iron 25 0 0 25
	callevent get_chance 1 5 20 100
	if ( GIVE_PRIZE ) addstoreitem STORENAME proj_bolt_silver 25 0 0 25

	if ( $item_exists(TC_CHEST_USER,bows_crossbow_heavy33) )
	{
		callevent get_chance 2 5 30 100
		if ( GIVE_PRIZE ) addstoreitem STORENAME proj_bolt_steel 25 0 0 25
	}
}

{ [server] get_chance_ultra_rare //<hp_req> - simplified get_chance
	local HP_REQ PARAM1
	callevent get_chance 1 3 50 HP_REQ
}

{ [server] get_chance_rare //<hp_req> - simplified get_chance
	local HP_REQ PARAM1
	callevent get_chance 2 5 100 HP_REQ
}

{ [server] get_chance_uncommon //<hp_req> - simplified get_chance
	local HP_REQ PARAM1
	callevent get_chance 5 20 100 HP_REQ
}

{ [server] get_chance //<single_player%> <%chance_per_player> [max_chance] [hp_req] //returns GIVE_PRIZE

	//<single_player%> - chance in single player game
	//<%chance_per_player> - chance in multiplayer game, per player
	//[max_chance] - default 100% (actually uncapped, but same diff)
	//[hp_req] - hp req to count as a player (def:20)

	local PCHANCE_SINGLE_PLAYER PARAM1
	local PCHANCE_PER_PLAYER PARAM2

	local D_ROLL $rand(1,100)
	local F_ROLL 100	//this inversion is superstious, most likely, but seems listen servers sometimes have 100% treasure spawns, thought maybe $rand() always returning 0 on those sometimes
	subtract F_ROLL D_ROLL

	local HP_REQ PARAM4
	if ( HP_REQ == 0 ) local HP_REQ 20
	if ( TC_NPLAYERS == 0 ) callevent get_players HP_REQ

	local N_PLAYERS TC_NPLAYERS

	local FINAL_CHANCE PCHANCE_SINGLE_PLAYER

	if ( N_PLAYERS > 1 )
	{
		add FINAL_CHANCE $math(multiply,PCHANCE_PER_PLAYER,$math(subtract,N_PLAYERS,1)) //FINAL_CHANCE + PCHANCE_PER_PLAYER * (N_PLAYERS - 1)
	}

	setvard GIVE_PRIZE 0

	local MAX_CHANCE PARAM3
	if ( MAX_CHANCE isnot 'PARAM3' ) capvar FINAL_CHANCE 0 MAX_CHANCE

	setvard TC_CHANCE FINAL_CHANCE

	if F_ROLL <= TC_CHANCE

	setvard GIVE_PRIZE 1
}

{ [server] get_quantity //<min_items> <max_items> <+*per_player> [hp_req] //returns GIVE_QUANTITY
	
	//-can be fractions
	// callevent get_quantity 1 8 0.25 10	//1 item + 1 per 4 players with >10hp, max 8
	// callevent get_quantity 0 10 0.25		//1 item w/4 players, max 10, 0 with less than 4
	// callevent get_quantity 0 10 2.0		//2 items per player

	local HP_REQ PARAM4
	if ( HP_REQ equals 'PARAM4' ) local HP_REQ 20
	callevent get_players HP_REQ

	local MIN_ITEMS PARAM1
	local MAX_ITEMS PARAM2
	local PER_PLAYER PARAM3
	local N_PLAYERS TC_NPLAYERS

	multiply PER_PLAYER N_PLAYERS
	if ( PER_PLAYER < 1 ) local PER_PLAYER 0
	setvard GIVE_QUANTITY $int(PER_PLAYER)
	add GIVE_QUANTITY MIN_ITEMS
	capvar GIVE_QUANTITY MIN_ITEMS MAX_ITEMS
	dbg get_quantity ( PARAM1 PARAM2 PARAM3 PARAM4 ) [ min MIN_ITEMS max MAX_ITEMS pplayer PARAM3 nplayers N_PLAYERS ] result: GIVE_QUANTITY
}

{ [server] add_gold //<min_amt> <max_amt> <quant>

	//keep adding gold_pouch_<quant> item
	//until reach min_amt gold
	//then add 1 bag per player until reach max_amt <gold>

	if ( game.playersnb <= 1 )
	{
		if $int(G_FAKE_PLAYERS) < 2
		//if one player, just use standard gold method
		gold PARAM1
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	if ( TC_NPLAYERS == 0 ) callevent get_players
	if ( TC_NPLAYERS == 0 ) setvard TC_NPLAYERS game.playersnb //this should not happen

	local BTADD_MAX_AMT PARAM2
	local BTADD_SIZE PARAM3

	callevent get_players BTADD_SIZE //hp requirement is by the gold ouch size

	dbg add_gold:start min BTADD_MIN_AMT max BTADD_MAX_AMT quant BTADD_SIZE

	local ITEM_NAME gold_pouch_
	stradd ITEM_NAME BTADD_SIZE

	//keep adding bags until <quant>*nplayers reached, or amount of gold is <max_amt>
	local DEST_AMOUNT TC_NPLAYERS
	multiply DEST_AMOUNT BTADD_SIZE //one bag per player
	if ( DEST_AMOUNT > BTADD_MAX_AMT ) local DEST_AMOUNT BTADD_MAX_AMT //provided less than max amount

	//turn the dest amount into # bags
	local TOTAL_BAGS DEST_AMOUNT
	divide TOTAL_BAGS BTADD_SIZE
	local TOTAL_BAGS $int(TOTAL_BAGS)

	if ( TOTAL_BAGS < 1 ) local TOTAL_BAGS 1
	addstoreitem STORENAME ITEM_NAME TOTAL_BAGS 0	
}


{ [server] get_players //[hp_req] returns TC_NPLAYERS with hp > hp_req - filters players by HP (removes BOTS/AFK)


	if ( game.time < TC_NEXTSCAN )
	{
		if TC_NPLAYERS_100 > 0
		if ( PARAM1 < 200 ) setvard TC_NPLAYERS TC_NPLAYERS_100
		if ( PARAM1 >= 200 ) setvard TC_NPLAYERS TC_NPLAYERS_200
		if ( PARAM1 >= 300 ) setvard TC_NPLAYERS TC_NPLAYERS_300
		if ( PARAM1 >= 400 ) setvard TC_NPLAYERS TC_NPLAYERS_400
		if ( PARAM1 >= 500 ) setvard TC_NPLAYERS TC_NPLAYERS_500
		if ( PARAM1 >= 600 ) setvard TC_NPLAYERS TC_NPLAYERS_600
		if ( PARAM1 >= 800 ) setvard TC_NPLAYERS TC_NPLAYERS_800
		if ( PARAM1 >= 1000 ) setvard TC_NPLAYERS TC_NPLAYERS_1000
		dbg get_players returned TC_NPLAYERS
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	setvard TC_NEXTSCAN game.time
	add TC_NEXTSCAN 20.0

	//reset stats
	setvard TC_NPLAYERS_100 0
	setvard TC_NPLAYERS_200 0
	setvard TC_NPLAYERS_300 0
	setvard TC_NPLAYERS_400 0
	setvard TC_NPLAYERS_500 0
	setvard TC_NPLAYERS_600 0
	setvard TC_NPLAYERS_800 0
	setvard TC_NPLAYERS_1000 0

	setvard TC_BY_STAT 0
	setvard TC_HP_REQ PARAM1
	if ( TC_HP_REQ equals 'PARAM1' ) setvard TC_HP_REQ 20
	getplayersnb TC_LPLAYERS
	setvard TC_NPLAYERS 0
	calleventloop $get_token_amt(TC_LPLAYERS) get_players_loop

	//if ( TC_NPLAYERS > game.players ) errormessage Cheating attempt (fake player count) logged to [FN]

	//no worthy players
	setvard TC_NONE_WORTHY 0
	if ( TC_NPLAYERS == 0 )
	{
		setvard TC_NONE_WORTHY 1
		if ( !AM_BLACK_CHEST ) setvard TC_NPLAYERS 1 //treat as multiplayer game, but only use a multiplier of 1
	}
	if ( G_FAKE_PLAYERS > 1 ) setvard TC_NPLAYERS G_FAKE_PLAYERS

	//dbg >GETPLAYERS_Results returned: [ TC_NPLAYERS ] with hp TC_HP_REQ ( none_worthy_flag TC_NONE_WORTHY )

	//often wind up making these in chest scripts, so, for convenience:
	setvard TC_NPLAYERS_HALF TC_NPLAYERS
	divide TC_NPLAYERS_HALF 2
	setvard TC_NPLAYERS_HALF $int(TC_NPLAYERS_HALF)
	setvard TC_NPLAYERS_QUART TC_NPLAYERS_HALF
	divide TC_NPLAYERS_QUART 2
	setvard TC_NPLAYERS_QUART $int(TC_NPLAYERS_QUART)
	if ( TC_NPLAYERS_HALF == 0 ) setvard TC_NPLAYERS_HALF 1
	if ( TC_NPLAYERS_QUART == 0 ) setvard TC_NPLAYERS_QUART 1
}

{ [server] get_players_by_stat //<stat_name> <min_req>
	//dbg >START_SCAN_BY_STAT PARAM1 PARAM2

	//reset stats
	setvard TC_NPLAYERS_100 0
	setvard TC_NPLAYERS_200 0
	setvard TC_NPLAYERS_300 0
	setvard TC_NPLAYERS_400 0
	setvard TC_NPLAYERS_500 0
	setvard TC_NPLAYERS_600 0
	setvard TC_NPLAYERS_800 0
	setvard TC_NPLAYERS_1000 0

	setvard TC_BY_STAT 1
	setvard TC_STAT PARAM1
	setvard TC_STAT_REQ PARAM2
	setvard TC_HP_REQ 20
	getplayersnb TC_LPLAYERS
	setvard TC_NPLAYERS 0
	calleventloop $get_token_amt(TC_LPLAYERS) get_players_loop
	//if ( TC_NPLAYERS > game.players ) errormessage Cheating attempt (fake player count) logged to [FN]

	//no worthy players
	setvard TC_NONE_WORTHY 0
	if ( TC_NPLAYERS == 0 )
	{
		setvard TC_NONE_WORTHY 1
		if ( !AM_BLACK_CHEST ) setvard TC_NPLAYERS 1 //treat as multiplayer game, but only use a multiplier of 1
	}

	if ( G_FAKE_PLAYERS > 1 ) setvard TC_NPLAYERS G_FAKE_PLAYERS

	//dbg >GETPLAYERS_Results: returned: [ TC_NPLAYERS ] with TC_STAT_REQ > TC_STAT ( none_worthy TC_NONE_WORTHY )
}

{ [server] get_players_loop

	local TC_LOOP_COUNT game.script.iteration
	local CUR_PLAYER $get_token(TC_LPLAYERS,TC_LOOP_COUNT)
	local FAILED_TEST 0

	//dbg >>SCANNNG: $get(CUR_PLAYER,name)
//	dbg afk $get(CUR_PLAYER,scriptvar,IS_AFK) (must be 0)
//	dbg frm $get(CUR_PLAYER,anim.current_frame) (must not be 0.88)
//	dbg view $get(CUR_PLAYER,viewangles) (must not be 0)
//	dbg curitem $get(CUR_PLAYER,currentitem) (must not be 0)
//	dbg inwrld $get(CUR_PLAYER,scriptvar,IN_WORLD) (must be 1)
//	dbg afktime $get(CUR_PLAYER,scriptvar,AFK_TIME) vs. intime $get(CUR_PLAYER,scriptvar,PL_TIME) (must be < half)
//	dbg hp $get(CUR_PLAYER,maxhp) ( must be > TC_HP_REQ / 20 )

	//==================== ANTI CHEAT CHECKS [BEGIN]
	//not valid if currently flagged afk by player_main
	if ( $get(CUR_PLAYER,scriptvar,IS_AFK) )
	{
		local FAILED_TEST 1
		dbg >>> $get(CUR_PLAYER,name) failed: AFK
	}

	if ( AM_BLACK_CHEST )
	{
		if $get(CUR_PLAYER,scriptvar,PL_TIME) < 10
		local FAILED_TEST 1
		dbg >>> $get(CUR_PLAYER,name) failed: Not On Long Enough
	}

	//not valid if never been attacked on this map
	if ( !$get(CUR_PLAYER,scriptvar,PL_BEEN_ATTACKED) )
	{
		local FAILED_TEST 1
		dbg >>> $get(CUR_PLAYER,name) failed: not_been_attacked
	}

//I dont trust these tests, too often chests are not giving what they should
//	//not valid if model not present (bots seem to always have this anim frame)
//	if ( $get(CUR_PLAYER,anim.current_frame) == 0.88 )
//	{
//		local FAILED_TEST 1
//		dbg >>> $get(CUR_PLAYER,name) failed: bot_frame
//	}
//
//	//bots always have these view angles
//	if ( $get(CUR_PLAYER,viewangles) equals '(0.00,0.00,0.00)' )
//	{
//		local FAILED_TEST 1
//		dbg >>> $get(CUR_PLAYER,name) failed: bot_angles
//	}
//	//bots never have a curernt item
//	if ( $get(CUR_PLAYER,currentitem) equals 0 )
//	{
//		local FAILED_TEST 1
//		dbg >>> $get(CUR_PLAYER,name) failed: bot_item
//	}
//
//	//player must be marked as in world by player_main
//	if ( !$get(CUR_PLAYER,scriptvar,IN_WORLD) )
//	{
//		local FAILED_TEST 1
//		dbg >>> $get(CUR_PLAYER,name) failed: not_in_world
//	}
//
//	//not valid if player has been AFK more than half his time here
//	local HALF_PL_TIME $get(CUR_PLAYER,scriptvar,PL_TIME)
//	divide HALF_PL_TIME 2
//	//dbg temp_getplayers half_inworldtime HALF_PL_TIME vs $get(CUR_PLAYER,scriptvar,AFK_TIME)
//	if ( $get(CUR_PLAYER,scriptvar,AFK_TIME) >= HALF_PL_TIME )
//	{
//		local FAILED_TEST 1
//		dbg >>> $get(CUR_PLAYER,name) failed: afk_greater_half ( half HALF_PL_TIME vs afktime $get(CUR_PLAYER,scriptvar,AFK_TIME)
//	}
	//==================== ANTI CHEAT CHECKS [END]

	//actual hp check
	if ( !FAILED_TEST )
	{
		local CUR_MAXHP $get(CUR_PLAYER,maxhp)
		if ( CUR_MAXHP >= 20 ) add TC_NPLAYERS_100 1
		if ( CUR_MAXHP >= 200 ) add TC_NPLAYERS_200 1
		if ( CUR_MAXHP >= 300 ) add TC_NPLAYERS_300 1
		if ( CUR_MAXHP >= 400 ) add TC_NPLAYERS_400 1
		if ( CUR_MAXHP >= 500 ) add TC_NPLAYERS_500 1
		if ( CUR_MAXHP >= 600 ) add  TC_NPLAYERS_600 1
		if ( CUR_MAXHP >= 800 ) add TC_NPLAYERS_800 1
		if ( CUR_MAXHP >= 1000 ) add TC_NPLAYERS_1000 1
	}

	if ( CUR_MAXHP < TC_HP_REQ )
	{
		local FAILED_TEST 1
		dbg >>> $get(CUR_PLAYER,name) failed: hp requirement ( TC_HP_REQ )
	}

	if ( TC_BY_STAT )
	{
		if $get(CUR_PLAYER,TC_STAT) < TC_STAT_REQ
		dbg >>> $get(CUR_PLAYER,name) failed: stat requirement ( TC_STAT TC_STAT_REQ )
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	if !FAILED_TEST

	add TC_NPLAYERS 1
	dbg >>> $get(CUR_PLAYER,name)  PLAYER COUNTED!
}

{ [server] spawn_black_chest
	dbg calling spawn_black_chest2
	if !NOT_VERIFIED
	////dbg BLACK_CHEST_LOC BC_ITEM_LIST BC_ITEM_CHANCES BC_REQ_PLAYERS BC_ITEM_NAMES BC_REQ_STAT BC_REQ_STAT_LEVEL
	setvard BC_BLACK_CHEST_SPAWNED 1
	callevent 1.0 spawn_black_chest2 //delay to help prevent crash
}

{ [server] spawn_black_chest2
	dbg spawning black chest
	//if ( G_DEVELOPER_MODE ) messageall green spawn_black_chest2 BLACK_CHEST_LOC BC_ITEM_LIST
	createnpc chests/black_chest BLACK_CHEST_LOC BC_ITEM_LIST BC_ITEM_CHANCES BC_REQ_PLAYERS BC_ITEM_NAMES BC_REQ_STAT BC_REQ_STAT_LEVEL BC_REQ_HP $get(ent_me,angles) BC_MIN_HP
}

//{ [server] bd_debug  //<print_var> <property_printvar> <extra> <extra> <caller_id>
//	saytextrange 2048
//	saytext var PARAM1 pvar $get(PARAM1,PARAM2) other: PARAM3
//	consolemsg PARAM5 $get(ent_me,name) reports: var PARAM1 pvar $get(PARAM1,PARAM2) other: PARAM3
//}

{ [server] add_noob_item //PARAM1 = chance%

	if ( PARAM1 startswith 'PARAM' ) local PARAM1 100

	local ROLL 100
	local A_RAND $rand(1,100)
	subtract ROLL A_RAND
	dbg add_noob_item ROLL vs PARAM1
	if ROLL < PARAM1
	local RND_LIST $rand(1,G_NOOB_SETS)
	if ( RND_LIST == 1 ) local ITEM_LIST G_NOOB_ITEMS1
	if ( RND_LIST == 2 ) local ITEM_LIST G_NOOB_ITEMS2
	if ( RND_LIST == 3 ) local ITEM_LIST G_NOOB_ITEMS3
	if ( RND_LIST == 4 ) local ITEM_LIST G_NOOB_ITEMS4
	if ( RND_LIST == 5 ) local ITEM_LIST G_NOOB_ITEMS5
	local N_ITEMS $get_token_amt(ITEM_LIST)
	subtract N_ITEMS 1
	local R_ITEM $rand(0,N_ITEMS)
	local P_ITEM $get_token(ITEM_LIST,R_ITEM)
	dbg selected P_ITEM of ( RND_LIST ) ITEM_LIST
	addstoreitem STORENAME P_ITEM 1 0
}

{ [server] add_good_item  //PARAM1 = chance%

	if ( PARAM1 startswith 'PARAM' ) local PARAM1 100

	local ROLL 100
	local A_RAND $rand(1,100)
	subtract ROLL A_RAND
	dbg add_good_item ROLL vs PARAM1
	if ROLL < PARAM1
	local RND_LIST $rand(1,G_GOOD_SETS)
	if ( RND_LIST == 1 ) local ITEM_LIST G_GOOD_ITEMS1
	if ( RND_LIST == 2 ) local ITEM_LIST G_GOOD_ITEMS2
	if ( RND_LIST == 3 ) local ITEM_LIST G_GOOD_ITEMS3
	if ( RND_LIST == 4 ) local ITEM_LIST G_GOOD_ITEMS4
	if ( RND_LIST == 5 ) local ITEM_LIST G_GOOD_ITEMS5
	local N_ITEMS $get_token_amt(ITEM_LIST)
	subtract N_ITEMS 1
	local R_ITEM $rand(0,N_ITEMS)
	local P_ITEM $get_token(ITEM_LIST,R_ITEM)
	dbg selected P_ITEM of ( RND_LIST ) ITEM_LIST
	addstoreitem STORENAME P_ITEM 1 0
}

{ [server] add_great_item  //PARAM1 = chance%

	if ( PARAM1 startswith 'PARAM' ) local PARAM1 100

	local ROLL 100
	local A_RAND $rand(1,100)
	subtract ROLL A_RAND
	dbg add_great_item ROLL vs PARAM1
	if ROLL < PARAM1
	local RND_LIST $rand(1,G_GREAT_SETS)
	if ( RND_LIST == 1 ) local ITEM_LIST G_GREAT_ITEMS1
	if ( RND_LIST == 2 ) local ITEM_LIST G_GREAT_ITEMS2
	if ( RND_LIST == 3 ) local ITEM_LIST G_GREAT_ITEMS3
	if ( RND_LIST == 4 ) local ITEM_LIST G_GREAT_ITEMS4
	if ( RND_LIST == 5 ) local ITEM_LIST G_GREAT_ITEMS5
	local N_ITEMS $get_token_amt(ITEM_LIST)
	subtract N_ITEMS 1
	local R_ITEM $rand(0,N_ITEMS)
	local P_ITEM $get_token(ITEM_LIST,R_ITEM)
	dbg selected P_ITEM of ( RND_LIST ) ITEM_LIST
	addstoreitem STORENAME P_ITEM 1 0

}

{ [server] add_epic_item   //PARAM1=chance% PARAM2=hpreq

	if $get(CHEST_USER,maxhp) > PARAM2

	if ( PARAM1 startswith 'PARAM' ) local PARAM1 100

	local ROLL 100
	local A_RAND $rand(1,100)
	subtract ROLL A_RAND
	//dbg add_epic_item ROLL vs PARAM1
	if ROLL < PARAM1

	local N_EPICS $g_get_array_amt(G_ARRAY_EPIC)
	local RND_PICK $rand(0,N_EPICS)
	local RND_ITEM $g_get_array(G_ARRAY_EPIC,RND_PICK)
	dbg add_epic_item RND_PICK of N_EPICS
	addstoreitem STORENAME RND_ITEM 1 0
}

{ reset_quality
	setvard ADDED_QUALITY 0
}

//sort all players from most worthy to least based on hp out to SORTED_LIST
//======== Sort Players [ BEGIN ]
{ [server] assemble_list

	getplayersnb PLAYER_LIST
	setvard SORTED_LIST "unset;"
	token.del SORTED_LIST 0

	calleventloop 10 sort_list

	if ( game.debug > 4 ) calleventloop $get_token_amt(SORTED_LIST) debug_return
}

{ [server] debug_return

	local CUR_PLAYER $get_token(SORTED_LIST,game.script.iteration)
	dbg # game.script.iteration $get(CUR_PLAYER,name) $get(CUR_PLAYER,maxhp)
}

{ [server] sort_list

	//dbg sort_list game.script.iteration

	//closest I could get to a conditional loop
	setvard PLAYERS_DETECT $get_token_amt(PLAYER_LIST)

	if PLAYERS_DETECT > 0
	setvard CUR_HIGH 0
	calleventloop PLAYERS_DETECT find_highest
	token.add SORTED_LIST HIGHEST_HP
	token.del PLAYER_LIST HIGHEST_IDX
	if PLAYERS_DETECT == 1
	//dbg adding remaing players
	token.add SORTED_LIST PLAYER_LIST
}

{ [server] find_highest


	//dbg find_highest game.script.iteration

	local L_LOOP_COUNT game.script.iteration
	add L_LOOP_COUNT START_IDX
	//dbg list is now: [ $get_token_amt(PLAYER_LIST) ] PLAYER_LIST
	local CUR_PLAYER $get_token(PLAYER_LIST,L_LOOP_COUNT)
	local CUR_MAXHP $get(CUR_PLAYER,maxhp)
	if ( CUR_MAXHP > CUR_HIGH )
	{
		setvard HIGHEST_HP CUR_PLAYER
		setvard CUR_HIGH CUR_MAXHP
		setvard HIGHEST_IDX L_LOOP_COUNT
	}
}
//======== Sort Players [ END ]

//h4x
{ reset_use
	setvard IN_USE 0
}

{
repeatdelay 30.0
	setvard IN_USE 0
	setvard LAST_USED_CHEST 0
}

{ [server] offer_felewyn_symbol //PARAM1 = % chance

	//dbg fele_check
	if $rand(1,100) <= PARAM1
	local L_FEL_QUEST $get_quest_data(CHEST_USER,f)
	if $get(CHEST_USER,maxhp) >= 750
	if L_FEL_QUEST isnot complete
	if $left(L_FEL_QUEST,0) equals 1

	local RND_ITEM "item_s"
	stradd RND_ITEM $rand(1,5)
	addstoreitem STORENAME RND_ITEM 1 0	
}

//{ [server] tc_felewyn_shard_check_banks
//	local CUR_BANK game.script.iteration
//	local CUR_BANK $int(CUR_BANK)
//	local CUR_BANK_NAME bank
//	stradd CUR_BANK_NAME CUR_BANK
//
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains item_s1 ) setvard ABORT_GIFT 1
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains item_s2 ) setvard ABORT_GIFT 1
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains item_s3 ) setvard ABORT_GIFT 1
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains item_s4 ) setvard ABORT_GIFT 1
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains item_s5 ) setvard ABORT_GIFT 1
//	if ( $get_quest_data(CHEST_USER,CUR_BANK_NAME) contains swords_fshard ) setvard ABORT_GIFT 1
//}

{ [server] add_noob_arrows //[amt] - Amount must be divisible by 15!

	local ARROW_LIST G_NOOB_ARROWS
	local BUNDLE_SIZE PARAM1
	if ( BUNDLE_SIZE startswith 'PARAM' ) local BUNDLE_SIZE 15

	local N_ARROW_NAMES $get_token_amt(ARROW_LIST)
	subtract N_ARROW_NAMES 1
	local ARROW_NAME $get_token(ARROW_LIST,$rand(0,N_ARROW_NAMES))
	addstoreitem STORENAME ARROW_NAME BUNDLE_SIZE 0 0 BUNDLE_SIZE

	dbg add_noob_arrows ARROW_NAME BUNDLE_SIZE
}

{ [server] add_good_arrows //[amt] - Amount must be divisible by 15!
	local ARROW_LIST G_GOOD_ARROWS
	local BUNDLE_SIZE PARAM1
	if ( BUNDLE_SIZE startswith 'PARAM' ) local BUNDLE_SIZE 15

	local N_ARROW_NAMES $get_token_amt(ARROW_LIST)
	subtract N_ARROW_NAMES 1
	local ARROW_NAME $get_token(ARROW_LIST,$rand(0,N_ARROW_NAMES))
	if ( ARROW_NAME contains proj_bolt ) local BUNDLE_SIZE 25
	addstoreitem STORENAME ARROW_NAME BUNDLE_SIZE 0 0 BUNDLE_SIZE

	dbg add_good_arrows ARROW_NAME BUNDLE_SIZE
}

{ [server] add_great_arrows //[amt] - Amount must be divisible by 15!
	local ARROW_LIST G_GREAT_ARROWS
	local BUNDLE_SIZE PARAM1
	if ( BUNDLE_SIZE startswith 'PARAM' ) local BUNDLE_SIZE 15

	local N_ARROW_NAMES $get_token_amt(ARROW_LIST)
	subtract N_ARROW_NAMES 1
	local ARROW_NAME $get_token(ARROW_LIST,$rand(0,N_ARROW_NAMES))
	if ( ARROW_NAME contains proj_bolt ) local BUNDLE_SIZE 25
	addstoreitem STORENAME ARROW_NAME BUNDLE_SIZE 0 0 BUNDLE_SIZE

	dbg add_great_arrows ARROW_NAME BUNDLE_SIZE
}

{ [server] add_epic_arrows //[amt] - Amount must be divisible by 15
	local ARROW_LIST G_EPIC_ARROWS
	local BUNDLE_SIZE PARAM1
	if ( BUNDLE_SIZE startswith 'PARAM' ) local BUNDLE_SIZE 15

	local N_ARROW_NAMES $get_token_amt(ARROW_LIST)
	subtract N_ARROW_NAMES 1
	local ARROW_NAME $get_token(ARROW_LIST,$rand(0,N_ARROW_NAMES))
	if ( ARROW_NAME contains proj_bolt ) local BUNDLE_SIZE 25
	addstoreitem STORENAME ARROW_NAME BUNDLE_SIZE 0 0 BUNDLE_SIZE

	dbg add_epic_arrows ARROW_NAME BUNDLE_SIZE
}